library(ggplot2)
library(stringr)
library(lognorm)
#define directory for analysis files
expwd <- "C:/Users/Adam/Desktop/SimThesis/OU-Thesis"
#set directory for simulation data
datawd <- "C:/Users/Adam/Desktop/SimThesis/Pathfinder-Simulation"
setwd(expwd) #sets working directory to analysis folder
dsgmatrix <- read.csv("thesis_design.csv",stringsAsFactors = FALSE) %>%
select(-X.1) #import design matrix
setwd(datawd) #sets working directory to data folder
#import occupant data from sims
occupants <- data.frame() #make an empty data frame to fill
for (imp_val_occ in 1:nrow(dsgmatrix)){#begins loop to read all occupant data
tri_occ <- dsgmatrix[imp_val_occ,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_occ,"Scenario.Num"]#Pull Scenario number
occ_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_occupants.csv")
temp_occ <- #create a temporary data frame of summarized data
read.csv(occ_path,stringsAsFactors = FALSE) %>%#read appropriate data
summarize("Max TET" = max(exit.time.s.),"Min TET" = min(exit.time.s.),
"Avg TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[1]],
"sd TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[2]],
"Avg TET arithmetic" = mean(exit.time.s.),
"sd TET arithmetic" = sd(exit.time.s.),
"Max Active Time" = max(active.time.s.),
"Min Active Time" = min(active.time.s.),
"Avg Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[1]],
"sd Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[2]],
"Avg Distance arithmetic" = mean(distance..m.),
"sd Distance arithmetic" = sd(distance..m.)) %>%
mutate("Trial.Index" = tri_occ)#add trial number
occupants <- bind_rows(temp_occ,occupants)#bind new data with previous data
}
datamatrix <- #join occupant data with design matrix into singld df
left_join(x = dsgmatrix,y = occupants,by = "Trial.Index")
#import room data
#import initial trial
rooms_select <- c("time.s.","Remaining..Total.","Exited..Total.")#define cols
exited_select <- c("time.s.","Exited..Total.")
remaining_select <- c("time.s.","Remaining..Total.")
rooms <- read.csv("Trial1/T1_S2_rooms.csv",stringsAsFactors = FALSE) %>%
select(all_of(rooms_select))#pick specific columns
#create data frame of occupants exited over time
exited <- select(rooms,all_of(exited_select))
#create data frame of occupants remaining over time
remaining <- select(rooms,all_of(remaining_select))#select columns
temp_names <- c("Time (s)","Trial 1")
colnames(exited) <- temp_names#rename columns
colnames(remaining) <- temp_names#rename columns
for (imp_val_rooms in 2:nrow(dsgmatrix)) {#begins loop to read room data
tri_occ <- dsgmatrix[imp_val_rooms,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_rooms,"Scenario.Num"]#Pull Scenario number
rooms_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_rooms.csv")
rooms <- read.csv(rooms_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(rooms_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exits <- #create temporary df of total exited occupants
select(rooms,all_of(exited_select))
temp_remaining <- #create temp df of total remaining occupants
select(rooms,remaining_select)
colnames(temp_exits) <- temp_names#renames columns
colnames(temp_remaining) <- temp_names#renames columns
exited <- #joins data together
full_join(exited,temp_exits,by = temp_names[1])
remaining <- #joins data together
full_join(remaining,temp_remaining,by = temp_names[1])
}
#import exit data
#create initial data frame
doors_select <- #define selections
c("time.s.","Exit1.1","Exit1.2","Exit1.3","Exit1.4","Exit1.5")
doors <- read.csv("Trial1/T1_S2_doors.csv",stringsAsFactors = FALSE) %>%
select(all_of(doors_select))#create master df & select specific cols
exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create df for exit1
exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create df for exit2
exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create df for exit3
exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create df for exit4
exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create df for exit5
temp_names <- c("Time (s)","Trial 1")#define column names
colnames(exit1) <- temp_names#change column names for exit1
colnames(exit2) <- temp_names#change column names for exit2
colnames(exit3) <- temp_names#change column names for exit3
colnames(exit4) <- temp_names#change column names for exit4
colnames(exit5) <- temp_names#change column names for exit5
for (imp_val_doors in 2:nrow(dsgmatrix)) {#bins loop toimport rest of data
tri_occ <- dsgmatrix[imp_val_doors,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_doors,"Scenario.Num"]#Pull Scenario number
doors_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_doors.csv")
doors <- read.csv(doors_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(doors_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create temp exit 1 df
temp_exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create temp exit 2 df
temp_exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create temp exit 3 df
temp_exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create temp exit 4 df
temp_exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create temp exit 5 df
colnames(temp_exit1) <- temp_names#rename columns
colnames(temp_exit2) <- temp_names#rename columns
colnames(temp_exit3) <- temp_names#rename columns
colnames(temp_exit4) <- temp_names#rename columns
colnames(temp_exit5) <- temp_names#rename columns
exit1 <- full_join(exit1,temp_exit1,by = temp_names[1])#joins exit1 data
exit2 <- full_join(exit2,temp_exit2,by = temp_names[1])#joins exit2 data
exit3 <- full_join(exit3,temp_exit3,by = temp_names[1])#joins exit3 data
exit4 <- full_join(exit4,temp_exit4,by = temp_names[1])#joins exit4 data
exit5 <- full_join(exit5,temp_exit5,by = temp_names[1])#joins exit5 data
}
exit1[is.na(exit1)] <- 0 #replace NA with zero values
exit2[is.na(exit2)] <- 0 #replace NA with zero values
exit3[is.na(exit3)] <- 0 #replace NA with zero values
exit4[is.na(exit4)] <- 0 #replace NA with zero values
exit5[is.na(exit5)] <- 0 #replace NA with zero values
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
exit2_cum <- exit2#create a new data frame for cumulative count
exit3_cum <- exit3#create a new data frame for cumulative count
exit4_cum <- exit4#create a new data frame for cumulative count
exit5_cum <- exit5#create a new data frame for cumulative count
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,"Time (s)")
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
}
}
#define function to summarize exit data & join to occupants matrix
# sum_exit_data <- function (df1,df2,headername) {
#   temp_df <- df1[,-1]
#   for (num_exit in 2:nrow(temp_df)) {
#     temp_df[num_exit,] <- temp_df[txt,] + temp_df[num_exit - 1,]
#   }
#   temp_df <- gather(temp_df,key = "Trial",value = headername)
#   temp_df <- mutate(temp_df,"Trial.Index" = as.integer(str_sub(temp_df[,"Trial"],
#                    start = str_locate(
#                      temp_df[,"Trial"],pattern = " ") + 1,
#                    end = str_length(temp_df[,"Trial"]))))
#   df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
# }
# sum_exit_data(exit1,datamatrix,"Exit 1")
#clean up variables
rm(doors,rooms,temp_names,temp_occ,temp_remaining,tri_occ,scen_occ,doors_path,
doors_select,exited_select,imp_val_rooms,imp_val_doors,imp_val_occ,
occ_path,remaining_select,temp_exit1,temp_exit2,temp_exit3,temp_exit4,
temp_exit5,rooms_select,rooms_path,temp_exits)
#one-time print of data .csv files
setwd(expwd)
cum_exit_data(exit1_cum)
tail(exit1_cum)
data.class(exit1$`Time (s)`)
tail(arrange(exit1,"Time (s)"))
tail(arrange(exit1,exit1[1,])
)
tail(arrange(exit1,1))
head(exit1)
view(exit1_cum)
View(exit1_cum)
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,"Time (s)")
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
}
}
cum_exit_data(exit1_cum)
tail(exit1_cum)
head(arrange(exit1,-"Time (s)"))
head(arrange(exit1,-'Time (s)'))
rlang::last_error()
help(arrange)
head(arrange(exit1[,1])
)
head(arrange(exit1,-exit[,1]))
head(arrange(exit1,-exit1[,1]))
tail(arrange(exit1,exit1[,1]))
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,dfx[,1])
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
}
}
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
cum_exit_data(exit1_cum)
tail(exit1_cum)
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,dfx[,1])
# for (cum_exit in 2:nrow(dfx)) {
#  dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
#}
}
tail(exit1_cum)
tail(arrange(exit1_cum,exit1_cum[,1]))
tail(exit1_cum)
cum_exit_data(exit1_cum)
tail(exit1_cum)
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,-dfx[,1])
# for (cum_exit in 2:nrow(dfx)) {
#  dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
#}
}
cum_exit_data(exit1_cum)
tail(exit1_cum)
head(arrange(exit1_cum,-[,1]))
head(arrange(exit1_cum,-exit1_cum[,1]))
test <- function (silly) {}
test <- function (silly) {}
test <- function (silly) {print(silly[,1])}
test(occupants)
head(occupants)
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,dfx[,1])
# for (cum_exit in 2:nrow(dfx)) {
#  dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
#}
}
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
exit2_cum <- exit2#create a new data frame for cumulative count
exit3_cum <- exit3#create a new data frame for cumulative count
exit4_cum <- exit4#create a new data frame for cumulative count
exit5_cum <- exit5#create a new data frame for cumulative count
cum_exit_data(exit1_cum)
tail(exit1_cum)
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx[,1])
# for (cum_exit in 2:nrow(dfx)) {
#  dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
#}
}
cum_exit_data(exit1_cum)
data.class(exit1_cum$`Time (s)`)
is.numeric(exit1_cum$`Time (s)`)
tail(arrange(exit1_cum,exit1_cum[,1]))
cum_exit_data <- function (dfx) {
dfx <- arrange(dfx,dfx[,1])
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
}
}
cum_exit_data(exit1_cum)
cum_exit_data <- function(dfx) {
dfx <- arrange(dfx,dfx[,1])
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
}
}
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
cum_exit_data(exit1_cum)
tail(exit1_cum)
rm(test)
cum_exit_data <- function(dfx) {
dfx <- arrange(dfx,"Time (s)")
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,] <- dfx[cum_exit,] + dfx[cum_exit - 1,]
}
}
exit1[is.na(exit1)] <- 0 #replace NA with zero values
cum_exit_data(exit1_cum)
tail(exit1_cum)
exit1_cum[3,]+exit1_cum[2,]
exit1_cum[1,-1]
cum_exit_data <- function(dfx) {
dfx <- arrange(dfx,"Time (s)")
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,-1] <- dfx[cum_exit,] + dfx[cum_exit - 1,-1]
}
}
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
cum_exit_data(exit1_cum)
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,-1] <- dfx[cum_exit,-1] + dfx[cum_exit - 1,-1]
}
cum_exit_data <- function(dfx) {
dfx <- arrange(dfx,"Time (s)")
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,-1] <- dfx[cum_exit,-1] + dfx[cum_exit - 1,-1]
}
}
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
cum_exit_data(exit1_cum)
tail(exit1_cum)
cum_exit_data <- function(dfx) {
dfx <- dfx %>% arrange(dfx[,1])
for (cum_exit in 2:nrow(dfx)) {
dfx[cum_exit,-1] <- dfx[cum_exit,-1] + dfx[cum_exit - 1,-1]
}
}
cum_exit_data(exit1_cum)
tail(exit1_cum)
cum_exit_data <- function(dfx) {
dfx <- arrange(dfx,-dfx[,1])
#for (cum_exit in (2:nrow(dfx))) {
# dfx[cum_exit,-1] <- dfx[cum_exit,-1] + dfx[cum_exit - 1,-1]
#}
}
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
cum_exit_data(exit1_cum)
tail(exit1_cum)
exit1_cum <- arrange(exit1_cum,exit1_cum[,1])
tail(exit1_cum)
#summarize exit data
exit1_cum <- exit1#create a new data frame for cumulative count
#summarize exit data
exit1_cum <- arrange(exit1,exit1[,1])#create a new df for cumulative count
tail(exit1_cum)
#summarize exit data
exit1_cum <- arrange(exit1,exit1[,1])#create a new df for cumulative count
exit2_cum <- arrange(exit2,exit2[,1])#create a new df for cumulative count
exit3_cum <- arrange(exit3,exit3[,1])#create a new df for cumulative count
exit4_cum <- arrange(exit4,exit4[,1])#create a new df for cumulative count
exit5_cum <- arrange(exit5,exit5[,1])#create a new df for cumulative count
cum_exit_data <- function(dfx) {
for (cum_exit in (2:nrow(dfx))) {
dfx[cum_exit,-1] <- dfx[cum_exit,-1] + dfx[cum_exit - 1,-1]
}
}
cum_exit_data(exit1_cum)
tail(exit1_cum)
for(loop in 2:nrow(exit1_cum)){exit1_cum[loop,-1] <- exit1_cum[loop,-1] + exit1_cum[loop - 1,-1]}
tail(exit1_cum)
View(cum_exit_data)
#Wrangle data from simulation output
#Set initial conditions
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lognorm)
#define directory for analysis files
expwd <- "C:/Users/Adam/Desktop/SimThesis/OU-Thesis"
#set directory for simulation data
datawd <- "C:/Users/Adam/Desktop/SimThesis/Pathfinder-Simulation"
setwd(expwd) #sets working directory to analysis folder
dsgmatrix <- read.csv("thesis_design.csv",stringsAsFactors = FALSE) %>%
select(-X.1) #import design matrix
setwd(datawd) #sets working directory to data folder
#import occupant data from sims
occupants <- data.frame() #make an empty data frame to fill
for (imp_val_occ in 1:nrow(dsgmatrix)){#begins loop to read all occupant data
tri_occ <- dsgmatrix[imp_val_occ,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_occ,"Scenario.Num"]#Pull Scenario number
occ_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_occupants.csv")
temp_occ <- #create a temporary data frame of summarized data
read.csv(occ_path,stringsAsFactors = FALSE) %>%#read appropriate data
summarize("Max TET" = max(exit.time.s.),"Min TET" = min(exit.time.s.),
"Avg TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[1]],
"sd TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[2]],
"Avg TET arithmetic" = mean(exit.time.s.),
"sd TET arithmetic" = sd(exit.time.s.),
"Max Active Time" = max(active.time.s.),
"Min Active Time" = min(active.time.s.),
"Avg Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[1]],
"sd Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[2]],
"Avg Distance arithmetic" = mean(distance..m.),
"sd Distance arithmetic" = sd(distance..m.)) %>%
mutate("Trial.Index" = tri_occ)#add trial number
occupants <- bind_rows(temp_occ,occupants)#bind new data with previous data
}
datamatrix <- #join occupant data with design matrix into singld df
left_join(x = dsgmatrix,y = occupants,by = "Trial.Index")
#import room data
#import initial trial
rooms_select <- c("time.s.","Remaining..Total.","Exited..Total.")#define cols
exited_select <- c("time.s.","Exited..Total.")
remaining_select <- c("time.s.","Remaining..Total.")
rooms <- read.csv("Trial1/T1_S2_rooms.csv",stringsAsFactors = FALSE) %>%
select(all_of(rooms_select))#pick specific columns
#create data frame of occupants exited over time
exited <- select(rooms,all_of(exited_select))
#create data frame of occupants remaining over time
remaining <- select(rooms,all_of(remaining_select))#select columns
temp_names <- c("Time (s)","Trial 1")
colnames(exited) <- temp_names#rename columns
colnames(remaining) <- temp_names#rename columns
for (imp_val_rooms in 2:nrow(dsgmatrix)) {#begins loop to read room data
tri_occ <- dsgmatrix[imp_val_rooms,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_rooms,"Scenario.Num"]#Pull Scenario number
rooms_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_rooms.csv")
rooms <- read.csv(rooms_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(rooms_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exits <- #create temporary df of total exited occupants
select(rooms,all_of(exited_select))
temp_remaining <- #create temp df of total remaining occupants
select(rooms,remaining_select)
colnames(temp_exits) <- temp_names#renames columns
colnames(temp_remaining) <- temp_names#renames columns
exited <- #joins data together
full_join(exited,temp_exits,by = temp_names[1])
remaining <- #joins data together
full_join(remaining,temp_remaining,by = temp_names[1])
}
#import exit data
#create initial data frame
doors_select <- #define selections
c("time.s.","Exit1.1","Exit1.2","Exit1.3","Exit1.4","Exit1.5")
doors <- read.csv("Trial1/T1_S2_doors.csv",stringsAsFactors = FALSE) %>%
select(all_of(doors_select))#create master df & select specific cols
exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create df for exit1
exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create df for exit2
exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create df for exit3
exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create df for exit4
exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create df for exit5
temp_names <- c("Time (s)","Trial 1")#define column names
colnames(exit1) <- temp_names#change column names for exit1
colnames(exit2) <- temp_names#change column names for exit2
colnames(exit3) <- temp_names#change column names for exit3
colnames(exit4) <- temp_names#change column names for exit4
colnames(exit5) <- temp_names#change column names for exit5
for (imp_val_doors in 2:nrow(dsgmatrix)) {#bins loop toimport rest of data
tri_occ <- dsgmatrix[imp_val_doors,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_doors,"Scenario.Num"]#Pull Scenario number
doors_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_doors.csv")
doors <- read.csv(doors_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(doors_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create temp exit 1 df
temp_exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create temp exit 2 df
temp_exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create temp exit 3 df
temp_exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create temp exit 4 df
temp_exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create temp exit 5 df
colnames(temp_exit1) <- temp_names#rename columns
colnames(temp_exit2) <- temp_names#rename columns
colnames(temp_exit3) <- temp_names#rename columns
colnames(temp_exit4) <- temp_names#rename columns
colnames(temp_exit5) <- temp_names#rename columns
exit1 <- full_join(exit1,temp_exit1,by = temp_names[1])#joins exit1 data
exit2 <- full_join(exit2,temp_exit2,by = temp_names[1])#joins exit2 data
exit3 <- full_join(exit3,temp_exit3,by = temp_names[1])#joins exit3 data
exit4 <- full_join(exit4,temp_exit4,by = temp_names[1])#joins exit4 data
exit5 <- full_join(exit5,temp_exit5,by = temp_names[1])#joins exit5 data
}
#creating a fractional factorial design
#2^3-1
#load packages
library(AlgDesign)
library(dplyr)
library(tidyr)
#defining the design
#define the levels
levels.design <- c(2,2,2)
#create a full 2^3 factorial design
f.design <- gen.factorial(levels = levels.design)
# create the fractional design from the full design
pf.design <- optFederov(data = f.design,
nTrials = sum(levels.design),
approximate = TRUE)
#extract a dataframe of the design
pf.design <- pf.design$design
#create data frame for the design including replications
#define the number of replications
n.reps <- 10
#copy the original design dataframe
design.dummy <- pf.design
#concatenate the dataframe n-1 times
i.reps <- 1
while (i.reps < n.reps) {
pf.design <- pf.design %>%
bind_rows(design.dummy)
i.reps <- i.reps +1
}
pf.design[sample(1:nrow(pf.design)),]
pf.design[1:nrow(pf.design),]
pf.design[1:nrow(pf.design)-1,]
pf.design[1:nrow(pf.design)-1,X3]
pf.design[1,1]
pf.design[2,2]
pf.design[2,4]
pf.design[1:2,]
pf.design[1:2,2:5]
pf.design[1:2,2:4]
pf.design[c(2,6,4,21),]
setwd("C:/Users/leczn/Desktop/OU Thesis")
getwd()
view(read.csv("thesis_design.csv",stringsAsFactors = FALSE))
view(read.csv("thesis_design",stringsAsFactors = FALSE))
help("View")
View(read.csv("thesis_design",stringsAsFactors = FALSE))
View(read.csv("thesis_design.csv",stringsAsFactors = FALSE))
