anova_df %>% filter(Trial.Index != 6)
distance_anova <- aov(Avg.Distance.arithmetic ~ populationsize *
obstaclespresent * startposition, data = anova_df)
distance_residual_data <- #collect residuals from ANOVA output
data.frame(distance_anova$residuals,distance_anova$fitted.values) %>%
mutate(Trial.Index = c(1:5,5:31,33:40)) %>%
left_join(select(datamatrix,Scenario,Trial.Index),by = "Trial.Index")
distance_residual_plot <- #generate plot of residuals vs. fitted values
ggplot(data = distance_residual_data,
mapping = aes(x = distance_anova.fitted.values,
y = distance_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of Average Distance Traveled",
x = "Fitted Distance Values (m)",y = "Residuals")
distance_qq_plot_residuals <- #generate qq plot of residuals
ggqqplot(distance_anova$residuals) +
labs(title = "Q-Q Plot of Average Distance Residuals")
distance_qq_plot_effects <- #generate qq plot of effects
ggqqplot(distance_anova$effects) +
labs(title = "Q-Q Plot of Average Distance Effects")
distance_population_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = populationsize,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for Average Distance Traveled
against the Population Size",
x = "Population Factor Level", y = "Response: TET (s)")
distance_obstacles_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = obstaclespresent,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for Average Distance Traveled against the
Presence of Obstacles",
x = "Obstacle Factor Level", y = "Response: TET (s)")
distance_position_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = startposition,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for Average Distance Traveled against
the Starting Position of Agents",
x = "Position Factor Level", y = "Response: TET (s)")
head(distance_residual_data)
distance_residual_data
#start ANOVA for avg distance traveled
anova_df <- #remove another outlier that exits for avg distance
anova_df %>% filter(Trial.Index != 6)
distance_anova <- aov(Avg.Distance.arithmetic ~ populationsize *
obstaclespresent * startposition, data = anova_df)
distance_residual_data <- #collect residuals from ANOVA output
data.frame(distance_anova$residuals,distance_anova$fitted.values) %>%
mutate(Trial.Index = c(1:5,5:31,33:40)) %>%
left_join(select(datamatrix,Scenario,Trial.Index),by = "Trial.Index")
distance_residual_data <- #collect residuals from ANOVA output
data.frame(distance_anova$residuals,distance_anova$fitted.values) %>%
mutate(Trial.Index = c(1:5,7:31,33:40)) %>%
left_join(select(datamatrix,Scenario,Trial.Index),by = "Trial.Index")
distance_residual_data
distance_residual_plot <- #generate plot of residuals vs. fitted values
ggplot(data = distance_residual_data,
mapping = aes(x = distance_anova.fitted.values,
y = distance_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of Average Distance Traveled",
x = "Fitted Distance Values (m)",y = "Residuals")
distance_residual_plot
TET_residual_data
sink(file = "outliers_not_included/anova_table_NO.txt")
summary(TET_anova)
print("\n")
summary(distance_anova)
sink()
TET_residual_plot
TET_residual_plot <- #generate residual plot
ggplot(TET_residual_data,
mapping = aes(x = TET_anova.fitted.values,y = TET_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of TET Values",
x = "Fitted TET Values (s)",
y = "Residuals",subtitle = "Outlier(s) Removed")
TET_residual_plot
#start ANOVA of TET
outsub <= "Outlier(s) Removed"
TET_qq_plot_residuals <- ggqqplot(TET_anova$residuals) +
labs(title = "Q-Q Plot of TET Residuals",
subtitle = outsub)#generate plot to test normality
#start ANOVA of TET
outsub <= "Outlier(s) Removed"
#start ANOVA of TET
outsub <- "Outlier(s) Removed"
TET_residual_plot <- #generate residual plot
ggplot(TET_residual_data,
mapping = aes(x = TET_anova.fitted.values,y = TET_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of TET Values",
x = "Fitted TET Values (s)",
y = "Residuals",
subtitle = outsub
)
TET_qq_plot_residuals <- ggqqplot(TET_anova$residuals) +
labs(title = "Q-Q Plot of TET Residuals",
subtitle = outsub)#generate plot to test normality
TET_qq_plot_residuals
TET_qq_plot_effects <- ggqqplot(TET_anova$effects) +
labs(title = "Q-Q Plot of TET Effects"
subtitle = outsub)#generate plot to test normality
TET_qq_plot_effects <- ggqqplot(TET_anova$effects) +
labs(title = "Q-Q Plot of TET Effects",
subtitle = outsub)#generate plot to test normality
TET_qq_plot_effects
TET_population_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = populationsize,y = Max.TET)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for TET against Population Size",
x = "Population Factor Level", y = "Response: TET (s)",
subtitle = outsub)
TET_population_me_plot
TET_obstacles_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = obstaclespresent,y = Max.TET)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for TET against the Presence of Obstacles",
x = "Obstacle Factor Level", y = "Response: TET (s)",
subtitle = outsub)
TET_obstacles_me_plot
TET_position_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = startposition,y = Max.TET)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for TET against the Starting Position
of Agents",
x = "Position Factor Level", y = "Response: TET (s)",
subtitle = outsub)
TET_position_me_plot
distance_residual_plot <- #generate plot of residuals vs. fitted values
ggplot(data = distance_residual_data,
mapping = aes(x = distance_anova.fitted.values,
y = distance_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of Average Distance Traveled",
x = "Fitted Distance Values (m)",y = "Residuals",
subtitle = outsub)
distance_residual_plot
distance_qq_plot_residuals <- #generate qq plot of residuals
ggqqplot(distance_anova$residuals) +
labs(title = "Q-Q Plot of Average Distance Residuals",
subtitle = outsub)
distance_qq_plot_residuals
distance_qq_plot_effects <- #generate qq plot of effects
ggqqplot(distance_anova$effects) +
labs(title = "Q-Q Plot of Average Distance Effects",
subtitle = outsub)
distance_qq_plot_effects
distance_obstacles_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = obstaclespresent,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for Average Distance Traveled against the
Presence of Obstacles",
x = "Obstacle Factor Level", y = "Response: TET (s)",
subtitle = outsub)
distance_obstacles_me_plot
distance_population_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = populationsize,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for Average Distance Traveled
against the Population Size",
x = "Population Factor Level", y = "Response: TET (s)",
subtitle = outsub)
distance_position_me_plot
distance_population_me_plot
distance_position_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = startposition,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
labs(title = "Main Effects Plot for Average Distance Traveled against
the Starting Position of Agents",
x = "Position Factor Level", y = "Response: TET (s)",
subtitle = outsub)
distance_position_me_plot
sample(datamatrix[datamatrix$Scenario = "S1","Trial.Index"],2)
sample(datamatrix[datamatrix$Scenario == "S1","Trial.Index"],2)
#take a sample of two from each scenario group for analysis within Pathfinder
sample(datamatrix[datamatrix$Scenario == "S2","Trial.Index"],2)
#take a sample of two from each scenario group for analysis within Pathfinder
sample(datamatrix[datamatrix$Scenario == "S3","Trial.Index"],2)
#take a sample of two from each scenario group for analysis within Pathfinder
sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
exited_plot
#Set initial conditions
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lognorm)
library(RColorBrewer)
library(ggpubr)
library(knitr)
help("scale_x_continuous")
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(breaks = 5)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(n.breaks = 25)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(minor_breaks = scales::extended_breaks(n = 50),
n.breaks = 25)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
minor_breaks = scales::extended_breaks(n = 50),
n.breaks = 25)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25)
exited_plot
help(geom_abline)
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = 200,color = "orange")
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = 200,color = "orange", size = 8,alpha = 0.3)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = 200,color = "orange", size = 4,alpha = 0.3)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = c(200,475,550),
color = "orange", size = 4,alpha = 0.3)
exited_plot
remaining_plot <- #generate plot
ggplot(remaining_plotdata,mapping = aes(x = Time..s.,y = remaining)) +
geom_line(mapping = aes(colour = Scenario,group = Trial)) +
geom_label(data = remaining_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Remaining In Evacuation",
y = "Occupants Remaining", x = "Time (s)") +
scale_y_continuous(limits = range(remaining_plotdata$remaining)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = c(200,475,550),
color = "orange", size = 4,alpha = 0.3)
remaining_plot
all_exit_cum_plot
TET_plot
#plot occupants that exited building
vlines <- c(200,475,550) #create x intercepts for vertical lines
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",lable = as.character(vlines),
x = vlines, y = 2250)
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = as.character(vlines),
x = vlines, y = 2250)
exited_plot
help("annotate")
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue(vlines," s"),
x = vlines, y = 2250,angle = 90,vjust = 1)
help("tapply")
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = tapply(vlines,fun = str_glue(" s")),
x = vlines, y = 2250,angle = 90,vjust = 1)
help(sapply)
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = sapply(vlines,fun = str_glue(" s")),
x = vlines, y = 2250,angle = 90,vjust = 1)
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = sapply(vlines,FUN = str_glue(" s")),
x = vlines, y = 2250,angle = 90,vjust = 1)
help("str_glue")
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue(vlines," s"),
x = vlines, y = 2250,angle = 90,vjust = 1)
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue("{vlines} s"),
x = vlines, y = 2250,angle = 90,vjust = 1)
exited_plot
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue("{vlines} s"),
x = vlines, y = 250,angle = 90,vjust = 1)
exited_plot
remaining_plot <- #generate plot
ggplot(remaining_plotdata,mapping = aes(x = Time..s.,y = remaining)) +
geom_line(mapping = aes(colour = Scenario,group = Trial)) +
geom_label(data = remaining_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Remaining In Evacuation",
y = "Occupants Remaining", x = "Time (s)") +
scale_y_continuous(limits = range(remaining_plotdata$remaining)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = c(200,475,550),
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue("{vlines} s"),
x = vlines, y = 2250,angle = 90,vjust = 1)
remaining_plot
#take a sample of two from each scenario group for analysis within Pathfinder
#sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
#S1 = 18 and 30,S2 = 29 and 24,S3 = 40 and 2,S4 = 31 and 8
#Trial 32 will also be included since it is such a large outlier
#take a sample of times to analyze further using Pathfinder
sample(c(100:225),1)
#take a sample of two from each scenario group for analysis within Pathfinder
#sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
#S1 = 18 and 30,S2 = 29 and 24,S3 = 40 and 2,S4 = 31 and 8
#Trial 32 will also be included since it is such a large outlier
#take a sample of times to analyze further using Pathfinder
#sample(c(100:225),1)#select a time from beginning of sim to analyze [183 s]
sample(c(250:450),1)#select time from midle of sim to analyze
#take a sample of two from each scenario group for analysis within Pathfinder
#sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
#S1 = 18 and 30,S2 = 29 and 24,S3 = 40 and 2,S4 = 31 and 8
#Trial 32 will also be included since it is such a large outlier
#take a sample of times to analyze further using Pathfinder
#sample(c(100:225),1)#select a time from beginning of sim to analyze [183 s]
sample(c(250:450),1)#select time from midle of sim to analyze
#take a sample of two from each scenario group for analysis within Pathfinder
#sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
#S1 = 18 and 30,S2 = 29 and 24,S3 = 40 and 2,S4 = 31 and 8
#Trial 32 will also be included since it is such a large outlier
#take a sample of times to analyze further using Pathfinder
#sample(c(100:225),1)#select a time from beginning of sim to analyze [183 s]
#sample(c(250:450),1)#select a time from midle of sim to analyze [325 s]
sample(c(500:550),1)#select a time from end of sim for low population
#take a sample of two from each scenario group for analysis within Pathfinder
#sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
#S1 = 18 and 30,S2 = 29 and 24,S3 = 40 and 2,S4 = 31 and 8
#Trial 32 will also be included since it is such a large outlier
#take a sample of times to analyze further using Pathfinder
#sample(c(100:225),1)#select a time from beginning of sim to analyze [183 s]
#sample(c(250:450),1)#select a time from midle of sim to analyze [325 s]
#sample(c(500:550),1)#select a time from end of sim for low population [504 s]
sample(c(600:675),1)#select a time from end of sim for high population
datamatrix[,unique(datamatrix$Scenario)]
head(datamatrix)
