compES(0.25)
print(compES(0.25))
compES <- function(x) { y = sqrt((x^2)/((x^2)+1)) }
print(compES(0.25))
compES <- function(x) { y = sqrt((x^2)/((x^2)+1)) }
compES(f)
print(compES(0.25))
print(compES(0.1))
print(compES(0.5))
VAL <- (0.25^2)/((0.25^2)+1)
VAL
library(Superpower)
mu_from_ES(4,0.0588)
#This file is created to analyze statistical power of
#my thesis. It is also used to determine the number of
#replications for analysis.
#The analysis herein utilizes the R package 'Superpower'
#Methodology utilized is derived from Caldwell & Lakens (2021)
#load 'Superpower' package
library(Superpower)
#Step 1 - Define Effect Size & Means
#The current analysis considers moderate effect size
#Define the Eta-Squared value for moderate effect size
#Cohen (1988)
ES <- 0.0588
#Define the number of groups
K1 <- 2
K2 <- 3
#Create summary of means
mu1 <- mu_from_ES(K = K1,ES = ES)
mu2 <- mu_from_ES(K = K2,ES = ES)
data.class(mu2)
mu <- c(mu1,mu2)
data.class(mu)
is.vector(mu)
mu_from_ES(4,0.0588)
alpha <- 0.06
alpha <- 0.10
#Step 2 - Initial analyis of ANOVA Power
#define parameters
n <- 5
r <- 0
label_names <- c("starting position","non-concentrated","concentrated","obstacles","none","normal","distanced")
design_string <- 2b*3b
design_string <- "2b*3b"
sd <- 1
#run analysis
design_result <- ANOVA_design(
design = design_string,
n = n,
mu = mu,
sd = sd,
r = r,
labelnames = label_names
)
K <- 6
mu <- mu_from_ES(K,ES)
design_within <- ANOVA_design(
design = "3w", n = 80, mu = c(1, 0.5, 0),
sd = 2, r = 0.5,
labelnames = c("condition",
"cheerful",
"neutral", "sad"))
library(Superpower)
design_within <- ANOVA_design(
design = "3w", n = 80, mu = c(1, 0.5, 0),
sd = 2, r = 0.5,
labelnames = c("condition",
"cheerful",
"neutral", "sad"))
help(replicate)
power_sim <- function(n,d,nsims,seed = TRUE,print_plot = TRUE){}
power_sim <- function(n,d,nsims,seed = TRUE,print_plot = TRUE){}
# Define our power analysis simulation function
power_sim <- function(n, d, nsims, seed = TRUE, print_plot = TRUE){
if(seed == TRUE){set.seed(2)}
# For sample size `n`, we want to perform `nsims`
## number of simulations of our experiment using effect size `d`
replicate(n = nsims, exp = {
x1 = rnorm(n, d, 1)
x2 = rnorm(n, 0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
# Power for a given `n` is the long-run probability
## of rejecting the null hypothesis when it is true.
# In our simulation, it is the sum of all  `nsims` simulations
## of our study that yield p < .05 divided by the number of `nsims` performed.
power = sum(ps < .05) / nsims
result = cbind(n, power)
# Visualize the results as a plot
ps %>%
as.data.frame() %>%
ggplot(aes(x = .)) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
geom_vline(xintercept = 0.05,
linetype = "dashed",
color = "red") +
xlab(label = expression(italic(p) ~ "value")) +
ylab(label = "Frequency") +
labs(caption = paste(
"Power =",
power * 100,
"% \n",
sum(ps < .05),
"of",
nsims,
"simulations yield p < .05"
)) +
ggtitle(label = expr(paste(
"N = ",!!(n * 2),
" (", n[1], " = ",!!n, "; ", n[2], " = ",!!n, ")"
))) -> pl
# Print our plot
if(print_plot == TRUE){print(pl)}
# Return the result variable
return(result)
}
help(rnorm)
print(rnorm(30))
# Define our power analysis simulation function
power_sim <- function(n, d, nsims, seed = TRUE, print_plot = TRUE){
if(seed == TRUE){set.seed(2)}
# For sample size `n`, we want to perform `nsims`
## number of simulations of our experiment using effect size `d`
replicate(n = nsims, exp = {
x1 = rnorm(n, d, 1)
x2 = rnorm(n, 0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
# Power for a given `n` is the long-run probability
## of rejecting the null hypothesis when it is true.
# In our simulation, it is the sum of all  `nsims` simulations
## of our study that yield p < .05 divided by the number of `nsims` performed.
power = sum(ps < .05) / nsims
result = cbind(n, power)
# Visualize the results as a plot
ps %>%
as.data.frame() %>%
ggplot(aes(x = .)) +
geom_histogram(binwidth = 0.01) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 15)) +
geom_vline(xintercept = 0.05,
linetype = "dashed",
color = "red") +
xlab(label = expression(italic(p) ~ "value")) +
ylab(label = "Frequency") +
labs(caption = paste(
"Power =",
power * 100,
"% \n",
sum(ps < .05),
"of",
nsims,
"simulations yield p < .05"
)) +
ggtitle(label = expr(paste(
"N = ",!!(n * 2),
" (", n[1], " = ",!!n, "; ", n[2], " = ",!!n, ")"
))) -> pl
# Print our plot
if(print_plot == TRUE){print(pl)}
# Return the result variable
return(result)
}
replicate(n = nsims, exp = {
x1 = rnorm(n, d, 1)
x2 = rnorm(n, 0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
replicate(n = nsims, exp = {
x1 = rnorm(n, d, 1)
x2 = rnorm(n, 0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
replicate(n = nsims, exp = {
x1 = rnorm(100, 0.5, 1)
x2 = rnorm(100, 0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
replicate(n = 100, exp = {
x1 = rnorm(n, 0.5, 1)
x2 = rnorm(n, 0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
replicate(n = 100, exp = {
x1 = rnorm(n, 1)
x2 = rnorm(n, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
replicate(n = 100, exp = {
x1 = rnorm(n,0.5, 1)
x2 = rnorm(n,0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
replicate(n = 100, exp = {
x1 = rnorm(100,0.5, 1)
x2 = rnorm(100,0, 1)
t.test(x = x1, y = x2, var.equal = TRUE)$p.value}) -> ps
ps
as.data.frame(ps)
sum(ps<0.05)
sum(ps)
help(sum)
set.seed(2)
rep()
help(letters)
letters(3)
letters
letters$3
letters([1:3])
letters[1:3]
rep(factor(letters[1:3]),6)
rep(5,4)
help("t")
library(Superpower)
library(dplyr)
library(ggplot2)
library(tidyr)
install.packages("AlgDesign")
library(AlgDesign)
levels.design <- c(2,2,2)
f.design <- gen.factorial(levels = levels.design)
f.design
data.class(f.design)
optFederov(data = f.design,
ntrials = sum(levels.design),
approximate = TRUE)
optFederov(data = f.design,
nTrials = sum(levels.design),
approximate = TRUE)
data.class(f.design)
f.design
pf.design <- optFederov(data = f.design,
nTrials = sum(levels.design),
approximate = TRUE)
data.class(pf.design)
pf.design
pf.design <- pf.design$design
pf.design <- pf.design$design
pf.design <- optFederov(data = f.design,
nTrials = sum(levels.design),
approximate = TRUE)
pf.design <- pf.design$design
data.class(pf.design)
library(AlgDesign,dplyr,tidyr)
sample(pf.design)
library(dplyr)
library(tidyr)
pf.design[sample(1:nrow(pf.design),)]
pf.design
head(pf.design)
colnames(pf.design)
pf.design[sample(1:nrow(pf.design)),]
design.dummy <- pf.design
design.dummy <- bind_cols(pf.design,design.dummy)
design.dummy
design.dummy <- pf.design
design.dummy <- bind_rows(pf.design,design.dummy)
design.dummy <- pf.design
design.dummy <- pf.design
design.dummy <- bind_rows(pf.design,design.dummy)
design.dummy
#copy the original design dataframe
design.dummy <- pf.design
#concatenate the dataframe n-1 times
i.reps <- 1
#create data frame for the design including replications
#define the number of replications
n.reps <- 10
i.reps <- i.reps +1
while (i.reps < n.reps) {
pf.design %>%
bind_rows(design.dummy)
i.reps <- i.reps +1
}
pf.design <- pf.design %>%
bind_rows(design.dummy)
#concatenate the dataframe n-1 times
i.reps <- 1
while (i.reps < n.reps) {
pf.design <- pf.design %>%
bind_rows(design.dummy)
i.reps <- i.reps +1
}
#creating a fractional factorial design
#2^3-1
#install & load packages
install.packages("AlgDesign")
library(AlgDesign)
library(dplyr)
library(tidyr)
#defining the design
#define the levels
levels.design <- c(2,2,2)
#create a full 2^3 factorial design
f.design <- gen.factorial(levels = levels.design)
# create the fractional design from the full design
pf.design <- optFederov(data = f.design,
nTrials = sum(levels.design),
approximate = TRUE)
#extract a dataframe of the design
pf.design <- pf.design$design
#create data frame for the design including replications
#define the number of replications
n.reps <- 10
#copy the original design dataframe
design.dummy <- pf.design
#concatenate the dataframe n-1 times
i.reps <- 1
while (i.reps < n.reps) {
pf.design <- pf.design %>%
bind_rows(design.dummy)
i.reps <- i.reps +1
}
#creating a fractional factorial design
#2^3-1
#load packages
library(AlgDesign)
library(dplyr)
library(tidyr)
#defining the design
#define the levels
levels.design <- c(2,2,2)
#create a full 2^3 factorial design
f.design <- gen.factorial(levels = levels.design)
# create the fractional design from the full design
pf.design <- optFederov(data = f.design,
nTrials = sum(levels.design),
approximate = TRUE)
#extract a dataframe of the design
pf.design <- pf.design$design
#create data frame for the design including replications
#define the number of replications
n.reps <- 10
#copy the original design dataframe
design.dummy <- pf.design
#concatenate the dataframe n-1 times
i.reps <- 1
while (i.reps < n.reps) {
pf.design <- pf.design %>%
bind_rows(design.dummy)
i.reps <- i.reps +1
}
pf.design[sample(1:nrow(pf.design)),]
pf.design[1:nrow(pf.design),]
pf.design[1:nrow(pf.design)-1,]
pf.design[1:nrow(pf.design)-1,X3]
pf.design[1,1]
pf.design[2,2]
pf.design[2,4]
pf.design[1:2,]
pf.design[1:2,2:5]
pf.design[1:2,2:4]
pf.design[c(2,6,4,21),]
setwd("C:/Users/leczn/Desktop/OU Thesis")
getwd()
view(read.csv("thesis_design.csv",stringsAsFactors = FALSE))
view(read.csv("thesis_design",stringsAsFactors = FALSE))
help("View")
View(read.csv("thesis_design",stringsAsFactors = FALSE))
View(read.csv("thesis_design.csv",stringsAsFactors = FALSE))
getwd()
exit1 <- read.csv("exit1.csv",stringsAsFactors = FALSE)
head(exit1)
head(exit1[,1])
colnames(exit1)
exit1 <- exit1[,-1]
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize(headername = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1)
#Set initial conditions
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lognorm)
install.packages(lognorm)
library(lognorm)
install.packages("lognorm")
library(lognorm)
#Set initial conditions
library(dplyr)
library(tidyr)
library(ggplot2)
#Set initial conditions library(dplyr)
library(tidyr)
library(tidyr)
remove.packages("lognorm", lib="~/R/win-library/4.1")
library(lognorm)
#Set initial conditions
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
sum_exit_data(exit1)
help("mutate_")
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize(headername = sum(temp)) %>%
mutate_(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize_(headername = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize(headername = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
help(.vars)
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize({headername} = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize("{headername}" = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
library(glue)
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize("{headername}" = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize({headername} = sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize({headername} := sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,headername) {
temp_df <- gather(df1[,-1],key = Trial,value = temp) %>%
group_by(Trial) %>% summarize("{headername}" := sum(temp)) %>%
mutate(Trial.Index = as.integer(
str_sub(Trial,
start = 7,
end = str_length(Trial))))
#df2 <- left_join(x = df2,y = temp_df,by = "Trial.Index")
return(temp_df)
}
sum_exit_data(exit1,headername = "Exit1")
library(ggplot2)
getwd()
exited <- read.csv("exited.csv",stringsAsFactors = FALSE)
exited <- read.csv("exited",stringsAsFactors = FALSE)
exited <- read.csv("exited,csv",stringsAsFactors = FALSE)
exited <- read.csv("exited.csv",stringsAsFactors = FALSE)
