scen_occ <- dsgmatrix[imp_val_occ,"Scenario.Num"]#Pull Scenario number
occ_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_occupants.csv")
temp_occ <- #create a temporary data frame of summarized data
read.csv(occ_path,stringsAsFactors = FALSE) %>%#read appropriate data
summarize("Max TET" = max(exit.time.s.),"Min TET" = min(exit.time.s.),
"Avg TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[1]],
"sd TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[2]],
"Avg TET arithmetic" = mean(exit.time.s.),
"sd TET arithmetic" = sd(exit.time.s.),
"Max Active Time" = max(active.time.s.),
"Min Active Time" = min(active.time.s.),
"Avg Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[1]],
"sd Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[2]],
"Avg Distance arithmetic" = mean(distance..m.),
"sd Distance arithmetic" = sd(distance..m.)) %>%
mutate("Trial.Index" = tri_occ)#add trial number
occupants <- bind_rows(temp_occ,occupants)#bind new data with previous data
}
datamatrix <- #join occupant data with design matrix into single df
left_join(x = dsgmatrix,y = occupants,by = "Trial.Index")
#import room data
#import initial trial
rooms_select <- c("time.s.","Remaining..Total.","Exited..Total.")#define cols
exited_select <- c("time.s.","Exited..Total.")
remaining_select <- c("time.s.","Remaining..Total.")
rooms <- read.csv("Trial1/T1_S2_rooms.csv",stringsAsFactors = FALSE) %>%
select(all_of(rooms_select))#pick specific columns
#create data frame of occupants exited over time
exited <- select(rooms,all_of(exited_select))
#create data frame of occupants remaining over time
remaining <- select(rooms,all_of(remaining_select))#select columns
temp_names <- c("Time (s)","Trial 1")
colnames(exited) <- temp_names#rename columns
colnames(remaining) <- temp_names#rename columns
for (imp_val_rooms in 2:nrow(dsgmatrix)) {#begins loop to read room data
tri_occ <- dsgmatrix[imp_val_rooms,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_rooms,"Scenario.Num"]#Pull Scenario number
rooms_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_rooms.csv")
rooms <- read.csv(rooms_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(rooms_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exits <- #create temporary df of total exited occupants
select(rooms,all_of(exited_select))
temp_remaining <- #create temp df of total remaining occupants
select(rooms,remaining_select)
colnames(temp_exits) <- temp_names#renames columns
colnames(temp_remaining) <- temp_names#renames columns
exited <- #joins data together
full_join(exited,temp_exits,by = temp_names[1])
remaining <- #joins data together
full_join(remaining,temp_remaining,by = temp_names[1])
}
exited <- arrange(exited,exited[,1])#sort exited df by time column
remaining <- arrange(remaining,remaining[,1])#sort remaining df by time column
for (rowval in 2:nrow(remaining)) {#remove NA values from 'remaining' df
for (colval in 1:ncol(remaining)) {
if (is.na(remaining[rowval,colval])) {
remaining[rowval,colval] <- remaining[rowval - 1,colval]
}}}
for (rowval in 2:nrow(exited)) {#remove NA values from 'exited' df
for (colval in 1:ncol(exited)) {
if (is.na(exited[rowval,colval])) {
exited[rowval,colval] <- exited[rowval - 1, colval]
}}}
#import exit data
#create initial data frame
doors_select <- #define selections
c("time.s.","Exit1.1","Exit1.2","Exit1.3","Exit1.4","Exit1.5")
doors <- read.csv("Trial1/T1_S2_doors.csv",stringsAsFactors = FALSE) %>%
select(all_of(doors_select))#create master df & select specific cols
exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create df for exit1
exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create df for exit2
exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create df for exit3
exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create df for exit4
exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create df for exit5
temp_names <- c("Time (s)","Trial 1")#define column names
colnames(exit1) <- temp_names#change column names for exit1
colnames(exit2) <- temp_names#change column names for exit2
colnames(exit3) <- temp_names#change column names for exit3
colnames(exit4) <- temp_names#change column names for exit4
colnames(exit5) <- temp_names#change column names for exit5
for (imp_val_doors in 2:nrow(dsgmatrix)) {#bins loop toimport rest of data
tri_occ <- dsgmatrix[imp_val_doors,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_doors,"Scenario.Num"]#Pull Scenario number
doors_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_doors.csv")
doors <- read.csv(doors_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(doors_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create temp exit 1 df
temp_exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create temp exit 2 df
temp_exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create temp exit 3 df
temp_exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create temp exit 4 df
temp_exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create temp exit 5 df
colnames(temp_exit1) <- temp_names#rename columns
colnames(temp_exit2) <- temp_names#rename columns
colnames(temp_exit3) <- temp_names#rename columns
colnames(temp_exit4) <- temp_names#rename columns
colnames(temp_exit5) <- temp_names#rename columns
exit1 <- full_join(exit1,temp_exit1,by = temp_names[1])#joins exit1 data
exit2 <- full_join(exit2,temp_exit2,by = temp_names[1])#joins exit2 data
exit3 <- full_join(exit3,temp_exit3,by = temp_names[1])#joins exit3 data
exit4 <- full_join(exit4,temp_exit4,by = temp_names[1])#joins exit4 data
exit5 <- full_join(exit5,temp_exit5,by = temp_names[1])#joins exit5 data
}
exit1[is.na(exit1)] <- 0 #replace NA with zero values
exit2[is.na(exit2)] <- 0 #replace NA with zero values
exit3[is.na(exit3)] <- 0 #replace NA with zero values
exit4[is.na(exit4)] <- 0 #replace NA with zero values
exit5[is.na(exit5)] <- 0 #replace NA with zero values
exit1 <- arrange(exit1,exit1[,1])#sort exit1 df by time
exit2 <- arrange(exit2,exit2[,1])#sort exit2 df by time
exit3 <- arrange(exit3,exit3[,1])#sort exit3 df by time
exit4 <- arrange(exit4,exit4[,1])#sort exit4 df by time
exit5 <- arrange(exit5,exit5[,1])#sort exit5 df by time
#summarize exit data
exit1_cum <- arrange(exit1,exit1[,1])#create a new df for cumulative count
exit2_cum <- arrange(exit2,exit2[,1])#create a new df for cumulative count
exit3_cum <- arrange(exit3,exit3[,1])#create a new df for cumulative count
exit4_cum <- arrange(exit4,exit4[,1])#create a new df for cumulative count
exit5_cum <- arrange(exit5,exit5[,1])#create a new df for cumulative count
for (cum_exit in (2:nrow(exit1_cum))) {#cumulative sum of all rows for exit1
exit1_cum[cum_exit,-1] <- exit1_cum[cum_exit,-1] + exit1_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit2_cum))) {#cumulative sum of all rows for exit2
exit2_cum[cum_exit,-1] <- exit2_cum[cum_exit,-1] + exit2_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit3_cum))) {#cumulative sum of all rows for exit3
exit3_cum[cum_exit,-1] <- exit3_cum[cum_exit,-1] + exit3_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit4_cum))) {#cumulative sum of all rows for exit2
exit4_cum[cum_exit,-1] <- exit2_cum[cum_exit,-1] + exit2_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit5_cum))) {#cumulative sum of all rows for exit2
exit5_cum[cum_exit,-1] <- exit5_cum[cum_exit,-1] + exit5_cum[cum_exit - 1,-1]}
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,df2,headername) {
temp_df <- #create temporary df
gather(df1[,-1],key = Trial,value = temp) %>%#unpivot into single column
group_by(Trial) %>%#tell formula to aggregate by trial
summarize("{headername}" := sum(temp)) %>%#calculate total exited per trial
mutate(Trial.Index = as.integer(#separate trial number from string
str_sub(Trial,
start = 7,
end = str_length(Trial)))) %>%
select(-Trial)
datamatrix <<- #join exit data to data matrix df by trial number
left_join(x = df2,y = temp_df,by = "Trial.Index")
}
sum_exit_data(df1 = exit1, df2 = datamatrix,headername = "Exit1")#execute exit1
sum_exit_data(df1 = exit2, df2 = datamatrix,headername = "Exit2")#execute exit2
sum_exit_data(df1 = exit3, df2 = datamatrix,headername = "Exit3")#execute exit3
sum_exit_data(df1 = exit4, df2 = datamatrix,headername = "Exit4")#execute exit4
sum_exit_data(df1 = exit5, df2 = datamatrix,headername = "Exit5")#execute exit5
datamatrix <- mutate(datamatrix, TotalExit = Exit1 + Exit2 + Exit3
+ Exit4 + Exit5)
#clean up variables
rm(doors,rooms,temp_names,temp_occ,temp_remaining,tri_occ,scen_occ,doors_path,
doors_select,exited_select,imp_val_rooms,imp_val_doors,imp_val_occ,
occ_path,remaining_select,temp_exit1,temp_exit2,temp_exit3,temp_exit4,
temp_exit5,rooms_select,rooms_path,temp_exits,cum_exit,rowval,colval)
#one-time print of data .csv files
setwd(expwd)
#write.csv(occupants,"occupants.csv")
#write.csv(exit1,"exit1.csv")
#write.csv(exit2,"exit2.csv")
#write.csv(exit3,"exit3.csv")
#write.csv(exit4,"exit4.csv")
#write.csv(exit5,"exit5.csv")
#write.csv(exited,"exited.csv")
#write.csv(remaining,"remaining.csv")
#write.csv(exit1_cum,"exit1_cum.csv")
#write.csv(exit2_cum,"exit2_cum.csv")
#write.csv(exit3_cum,"exit3_cum.csv")
#write.csv(exit4_cum,"exit4_cum.csv")
#write.csv(exit5_cum,"exit5_cum.csv")
#write.csv(datamatrix,"datamatrix.csv")
head(dsgmatrix)
head(datamatrix)
#write.csv(exit3,"exit3.csv")
#write.csv(exit4,"exit4.csv")
#write.csv(exit5,"exit5.csv")
#write.csv(exited,"exited.csv")
#write.csv(remaining,"remaining.csv")
#write.csv(exit1_cum,"exit1_cum.csv")
#write.csv(exit2_cum,"exit2_cum.csv")
#write.csv(exit3_cum,"exit3_cum.csv")
#write.csv(exit4_cum,"exit4_cum.csv")
#write.csv(exit5_cum,"exit5_cum.csv")
write.csv(datamatrix,"datamatrix.csv")
library(RColorBrewer)
remaining <- select(read.csv("remaining.csv",stringsAsFactors = FALSE),-X)
#read data that was previous wrangled and printed into appropriate directory
exited <- select(read.csv("exited.csv",stringsAsFactors = FALSE),-X)
remaining <- select(read.csv("remaining.csv",stringsAsFactors = FALSE),-X)
#define directory for analysis files
expwd <- "C:/Users/Adam/Desktop/SimThesis/OU-Thesis"
#set directory for simulation data
datawd <- "C:/Users/Adam/Desktop/SimThesis/Pathfinder-Simulation"
setwd(expwd) #sets working directory to analysis folder
datamatrix <- select(read.csv("datamatrix.csv",stringsAsFactors = FALSE),-X)
exit1 <- select(read.csv("exit1.csv",stringsAsFactors = FALSE),-X)
exit2 <- select(read.csv("exit2.csv",stringsAsFactors = FALSE),-X)
list.files(expwd)
expwd
#define directory for analysis files
expwd <- "C:/Users/Adam/Desktop/SimThesis/OU-Thesis"
list.files(expwd)
analysisfiles(list.files(expwd))
analysisfiles <- (list.files(expwd))
data.class(analysisfiles)
is.list(analysisfiles)
is.vector(analysisfiles)
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- list.files(expwd) %>%
select(str_detect(".csv"))
analysisfiles <- list.files(expwd) %>% filter(str_detect(".csv"))
help("filter")
analysisfiles <- str_detect(analysisfiles,".csv")
analysisfiles <- list.files(expwd)
analysisfiles <- analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-occupants.csv]
analysisfiles <- analysisfiles[-"occupants.csv"]
analysisfiles <- as.list(analysisfiles[str_detect(analysisfiles,".csv")])
lapply(analysisfiles,read.csv(stringsAsFactors = FALSE))
lapply(analysisfiles,read.csv,StringsAsFactors = FALSE)
lapply(analysisfiles,read.csv,FALSE)
analysisfiles <- list.files(expwd)
analysisfiles <- as.list(analysisfiles[str_detect(analysisfiles,".csv")])
help(read.csv)
lapply(analysisfiles,read.csv,stringsAsFactors = FALSE)
analysisfiles <- lapply(analysisfiles,read.csv,stringsAsFactors = FALSE)
exit1 <- analysisfiles$exit1.csv
exit1 <- analysisfiles[["exit1.csv"]]
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- analysisfiles %>% filter(str_detect(".csv"))
is.vector(analysisfiles)
help("assign")
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
help("str_detect")
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants" ^ "dsg")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"dsg")]
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"dsg")]
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisfiles["exit1.csv"]
analysisfiles[1]
analysisfiles <- analysisfiles[-str_detect(analysisfiels,"design")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"design")]
length(analysisfiles)
for (readers in 1:length(analysisfiles)) {
assign(
str_sub(analysisfiles[readers],start = 1,
end = str_locate(analysisfiles[readers],".")-1),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE))
}
str_sub(analysisfiles[2],start = 1, end = str_locate(analysisfiles[2],"."))
str_locate(analysisfiles[2],".")
str_extract(analysisfiles,\\b)
str_extract(analysisfiles,'\\b')
word(analysisfiles,sep = ".")
word(analysisfiles,1,sep = ".")
word(analysisfiles,2,sep = ".")
for (readers in 1:length(analysisfiles)) {
assign(
str_sub(analysisfiles[readers],start = 1,
end = str_locate(analysisfiles[readers],".")-1),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE))
}
str_split(analysisfiles,".")
is.character(analysisfiles[2])
str_split(analysisfiles[2],".")
str_detect(str_analysi[2])
is.vector(analysisfiles[2])
analysisfiles[2]
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisdata <- as.list(analysisfiles[-str_detect(analysisfiles,"design")])
analysis data <- data.frame(files = analysisfiles,data = analysisdata)
analysisdata <- data.frame(files = analysisfiles,data = analysisdata)
data.class(analysisdata)
head(analysisdata)
rm(analysisdata,analysisfiles)
rm(exit1)
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisdata <- analysisfiles[-str_detect(analysisfiles,"design")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"design")]
rm(analysisfiles)
rm(analysisdata)
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"design")]
str_locate(analysisfiles[2],".csv")
str_extract(analysisfiles[2],".csv")
str_remove(analysisfiles[2],".csv")
for (readers in 1:length(analysisfiles)) {
assign(
str_remove(analysisfiles[readers],".csv"),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE))
}
#plot occupants that exited building
exited_plotdata <- exited %>% gather(key = Trial,value = exited,-'Time(s)')
#plot occupants that exited building
exited_plotdata <- exited %>% gather(key = Trial,value = exited,-'Time (s)')
head(exited)
for (readers in 1:length(analysisfiles)) {
assign(
str_remove(analysisfiles[readers],".csv"),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE)) %>%
select(-X)
}
for (readers in 1:length(analysisfiles)) {
assign(
str_remove(analysisfiles[readers],".csv"),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE)) %>%
select(-X)
}
head(exited)
#plot occupants that exited building
exited_plotdata <- exited %>% gather(key = Trial,value = exited,-Time..s.)
analysisfiles
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"design")]
analysisfiles
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"thesis")]
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"thesis")]
analysisfiles
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles <- analysisfiles[-str_detect(analysisfiles,"pants")]
analysisfiles
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
analysisfiles
for (readers in 1:length(analysisfiles)) {
assign(
str_remove(analysisfiles[readers],".csv"),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE)) %>%
}
for (readers in 1:length(analysisfiles)) {
assign(
str_remove(analysisfiles[readers],".csv"),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE))
}
colnames(datamatrix)
#plot occupants that exited building
exited_plotdata <- exited %>% gather(key = Trial,value = exited,-Time..s.) %>%
left_join(select(datamatrix,Trial,Scenario.Num),Trial)
head(exited_plotdata)
colnames(exited)
#plot occupants that exited building
exited_plotdata <- exited %>% gather(key = Trial,value = exited,-Time..s.) #%>%
head(exited_plotdata)
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) #%>%
head(exited_plotdata)
str_replace(exited_plotdata[,2],"."," ")
str_replace(exited_plotdata[,2],"Trial.","Trial ")
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(select(datamatrix,Trial,Scenario.Num),by = Trial)
select(datamatrix,Trial)
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = Trial)
colnames(datamatrix)
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial")
head(exited_plotdata)
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial") %>%
mutate(Scenario = paste("S",Scenario.Num),sep = "")
head(exited_plotdata)
mutate(Scenario = paste("S",Scenario.Num,sep = "")
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial") %>%
mutate(Scenario = paste("S",Scenario.Num,sep = ""))
#plot occupants that exited building
exited_plotdata <- exited %>% select(-X) %>%
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial") %>%
mutate(Scenario = paste("S",Scenario.Num,sep = ""))
head(exited_plotdata)
geom_line(mapping = aes(color = Scenario))
geom_line(mapping = aes(colour = Scenario))
help("geom_line")
geom_line(mapping = aes(colour = Scenario, group = Trial))
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited) +
exited_plot <- ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial))
exited_plot
exited_plot <- ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
x = "Occupants Exited", y = "Time (s)") +
scale_x_continuous(limits = range(exited_plotdata$exited))+
scale_y_continuous(limits = c(0,675))
exited_plot
exited_plot <- ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
x = "Occupants Exited", y = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited))+
scale_x_continuous(limits = c(0,675))
exited_plot
exited_plot <- ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
x = "Occupants Exited", y = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited))+
scale_x_continuous(limits = c(0,700))
exited_plot
exited_plot <- ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
x = "Occupants Exited", y = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited))
exited_plot
exited_plot
#plot occupants that remained in building
remaining_plotdata <- remaining %>% select(-X) %>%
gather(key = Trial,value = remaining,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial") %>%
mutate(Scenario = paste("S",Scenario.Num,sep = ""))
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited))
remaining_plot <- #generate plot
ggplot(remaining_plotdata,mapping = ase(x = Time..s.,y = remaining)) +
geom_line(mapping = aes(colour = Scenario,group = Trial,size = 10)) +
labs(title = "Total Occupants Remaining In Evacuation",
y = "Occupants Remaining", x = "Time (s)") +
scale_y_continuous(limits = range(remaining_plotdata$remaining))
remaining_plot <- #generate plot
ggplot(remaining_plotdata,mapping = aes(x = Time..s.,y = remaining)) +
geom_line(mapping = aes(colour = Scenario,group = Trial,size = 10)) +
labs(title = "Total Occupants Remaining In Evacuation",
y = "Occupants Remaining", x = "Time (s)") +
scale_y_continuous(limits = range(remaining_plotdata$remaining))
remaining_plot
scale_y_continuous(limits = range(remaining_plotdata$remaining))
remaining_plot
scale_y_continuous(limits = range(remaining_plotdata$remaining))
remaining_plot
remaining_plot <- #generate plot
remaining_plot <- #generate plot
ggplot(remaining_plotdata,mapping = aes(x = Time..s.,y = remaining)) +
geom_line(mapping = aes(colour = Scenario,group = Trial)) +
labs(title = "Total Occupants Remaining In Evacuation",
y = "Occupants Remaining", x = "Time (s)") +
scale_y_continuous(limits = range(remaining_plotdata$remaining))
remaining_plot
