tri_occ <- dsgmatrix[imp_val_occ,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_occ,"Scenario.Num"]#Pull Scenario number
occ_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_occupants.csv")
temp_occ <- #create a temporary data frame of summarized data
read.csv(occ_path,stringsAsFactors = FALSE) %>%#read appropriate data
summarize("Max TET" = max(exit.time.s.),"Min TET" = min(exit.time.s.),
"Avg TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[1]],
"sd TET lognorm" =
estimateParmsLognormFromSample(exit.time.s.)[[2]],
"Avg TET arithmetic" = mean(exit.time.s.),
"sd TET arithmetic" = sd(exit.time.s.),
"Max Active Time" = max(active.time.s.),
"Min Active Time" = min(active.time.s.),
"Avg Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[1]],
"sd Distance lognorm" =
estimateParmsLognormFromSample(distance..m.)[[2]],
"Avg Distance arithmetic" = mean(distance..m.),
"sd Distance arithmetic" = sd(distance..m.)) %>%
mutate("Trial.Index" = tri_occ)#add trial number
occupants <- bind_rows(temp_occ,occupants)#bind new data with previous data
}
datamatrix <- #join occupant data with design matrix into single df
left_join(x = dsgmatrix,y = occupants,by = "Trial.Index")
#import room data
#import initial trial
rooms_select <- c("time.s.","Remaining..Total.","Exited..Total.")#define cols
exited_select <- c("time.s.","Exited..Total.")
remaining_select <- c("time.s.","Remaining..Total.")
rooms <- read.csv("Trial1/T1_S2_rooms.csv",stringsAsFactors = FALSE) %>%
select(all_of(rooms_select))#pick specific columns
#create data frame of occupants exited over time
exited <- select(rooms,all_of(exited_select))
#create data frame of occupants remaining over time
remaining <- select(rooms,all_of(remaining_select))#select columns
temp_names <- c("Time (s)","Trial 1")
colnames(exited) <- temp_names#rename columns
colnames(remaining) <- temp_names#rename columns
for (imp_val_rooms in 2:nrow(dsgmatrix)) {#begins loop to read room data
tri_occ <- dsgmatrix[imp_val_rooms,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_rooms,"Scenario.Num"]#Pull Scenario number
rooms_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_rooms.csv")
rooms <- read.csv(rooms_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(rooms_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exits <- #create temporary df of total exited occupants
select(rooms,all_of(exited_select))
temp_remaining <- #create temp df of total remaining occupants
select(rooms,remaining_select)
colnames(temp_exits) <- temp_names#renames columns
colnames(temp_remaining) <- temp_names#renames columns
exited <- #joins data together
full_join(exited,temp_exits,by = temp_names[1])
remaining <- #joins data together
full_join(remaining,temp_remaining,by = temp_names[1])
}
exited <- arrange(exited,exited[,1])#sort exited df by time column
remaining <- arrange(remaining,remaining[,1])#sort remaining df by time column
for (rowval in 2:nrow(remaining)) {#remove NA values from 'remaining' df
for (colval in 1:ncol(remaining)) {
if (is.na(remaining[rowval,colval])) {
remaining[rowval,colval] <- remaining[rowval - 1,colval]
}}}
for (rowval in 2:nrow(exited)) {#remove NA values from 'exited' df
for (colval in 1:ncol(exited)) {
if (is.na(exited[rowval,colval])) {
exited[rowval,colval] <- exited[rowval - 1, colval]
}}}
#import exit data
#create initial data frame
doors_select <- #define selections
c("time.s.","Exit1.1","Exit1.2","Exit1.3","Exit1.4","Exit1.5")
doors <- read.csv("Trial1/T1_S2_doors.csv",stringsAsFactors = FALSE) %>%
select(all_of(doors_select))#create master df & select specific cols
exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create df for exit1
exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create df for exit2
exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create df for exit3
exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create df for exit4
exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create df for exit5
temp_names <- c("Time (s)","Trial 1")#define column names
colnames(exit1) <- temp_names#change column names for exit1
colnames(exit2) <- temp_names#change column names for exit2
colnames(exit3) <- temp_names#change column names for exit3
colnames(exit4) <- temp_names#change column names for exit4
colnames(exit5) <- temp_names#change column names for exit5
for (imp_val_doors in 2:nrow(dsgmatrix)) {#bins loop toimport rest of data
tri_occ <- dsgmatrix[imp_val_doors,"Trial.Index"]#Pull trial number
scen_occ <- dsgmatrix[imp_val_doors,"Scenario.Num"]#Pull Scenario number
doors_path <- #create file path to read occupant data from appropriate trial
str_glue("Trial{tri_occ}/T{tri_occ}_S{scen_occ}_doors.csv")
doors <- read.csv(doors_path,stringsAsFactors = FALSE) %>%
#read appropriate data & select appropriate columns
select(all_of(doors_select))
temp_names[2] <- str_glue("Trial {tri_occ}")#modify column names
temp_exit1 <- select(doors,all_of(doors_select[c(1,2)]))#create temp exit 1 df
temp_exit2 <- select(doors,all_of(doors_select[c(1,3)]))#create temp exit 2 df
temp_exit3 <- select(doors,all_of(doors_select[c(1,4)]))#create temp exit 3 df
temp_exit4 <- select(doors,all_of(doors_select[c(1,5)]))#create temp exit 4 df
temp_exit5 <- select(doors,all_of(doors_select[c(1,6)]))#create temp exit 5 df
colnames(temp_exit1) <- temp_names#rename columns
colnames(temp_exit2) <- temp_names#rename columns
colnames(temp_exit3) <- temp_names#rename columns
colnames(temp_exit4) <- temp_names#rename columns
colnames(temp_exit5) <- temp_names#rename columns
exit1 <- full_join(exit1,temp_exit1,by = temp_names[1])#joins exit1 data
exit2 <- full_join(exit2,temp_exit2,by = temp_names[1])#joins exit2 data
exit3 <- full_join(exit3,temp_exit3,by = temp_names[1])#joins exit3 data
exit4 <- full_join(exit4,temp_exit4,by = temp_names[1])#joins exit4 data
exit5 <- full_join(exit5,temp_exit5,by = temp_names[1])#joins exit5 data
}
exit1[is.na(exit1)] <- 0 #replace NA with zero values
exit2[is.na(exit2)] <- 0 #replace NA with zero values
exit3[is.na(exit3)] <- 0 #replace NA with zero values
exit4[is.na(exit4)] <- 0 #replace NA with zero values
exit5[is.na(exit5)] <- 0 #replace NA with zero values
exit1 <- arrange(exit1,exit1[,1])#sort exit1 df by time
exit2 <- arrange(exit2,exit2[,1])#sort exit2 df by time
exit3 <- arrange(exit3,exit3[,1])#sort exit3 df by time
exit4 <- arrange(exit4,exit4[,1])#sort exit4 df by time
exit5 <- arrange(exit5,exit5[,1])#sort exit5 df by time
#summarize exit data
exit1_cum <- arrange(exit1,exit1[,1])#create a new df for cumulative count
exit2_cum <- arrange(exit2,exit2[,1])#create a new df for cumulative count
exit3_cum <- arrange(exit3,exit3[,1])#create a new df for cumulative count
exit4_cum <- arrange(exit4,exit4[,1])#create a new df for cumulative count
exit5_cum <- arrange(exit5,exit5[,1])#create a new df for cumulative count
for (cum_exit in (2:nrow(exit1_cum))) {#cumulative sum of all rows for exit1
exit1_cum[cum_exit,-1] <- exit1_cum[cum_exit,-1] + exit1_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit2_cum))) {#cumulative sum of all rows for exit2
exit2_cum[cum_exit,-1] <- exit2_cum[cum_exit,-1] + exit2_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit3_cum))) {#cumulative sum of all rows for exit3
exit3_cum[cum_exit,-1] <- exit3_cum[cum_exit,-1] + exit3_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit4_cum))) {#cumulative sum of all rows for exit2
exit4_cum[cum_exit,-1] <- exit4_cum[cum_exit,-1] + exit4_cum[cum_exit - 1,-1]}
for (cum_exit in (2:nrow(exit5_cum))) {#cumulative sum of all rows for exit2
exit5_cum[cum_exit,-1] <- exit5_cum[cum_exit,-1] + exit5_cum[cum_exit - 1,-1]}
#define function to summarize exit data & join to occupants matrix
sum_exit_data <- function (df1,df2,headername) {
temp_df <- #create temporary df
gather(df1[,-1],key = Trial,value = temp) %>%#unpivot into single column
group_by(Trial) %>%#tell formula to aggregate by trial
summarize("{headername}" := sum(temp)) %>%#calculate total exited per trial
mutate(Trial.Index = as.integer(#separate trial number from string
str_sub(Trial,
start = 7,
end = str_length(Trial)))) %>%
select(-Trial)
datamatrix <<- #join exit data to data matrix df by trial number
left_join(x = df2,y = temp_df,by = "Trial.Index")
}
sum_exit_data(df1 = exit1, df2 = datamatrix,headername = "Exit1")#execute exit1
sum_exit_data(df1 = exit2, df2 = datamatrix,headername = "Exit2")#execute exit2
sum_exit_data(df1 = exit3, df2 = datamatrix,headername = "Exit3")#execute exit3
sum_exit_data(df1 = exit4, df2 = datamatrix,headername = "Exit4")#execute exit4
sum_exit_data(df1 = exit5, df2 = datamatrix,headername = "Exit5")#execute exit5
datamatrix <- mutate(datamatrix, TotalExit = Exit1 + Exit2 + Exit3
+ Exit4 + Exit5)
#clean up variables
rm(doors,rooms,temp_names,temp_occ,temp_remaining,tri_occ,scen_occ,doors_path,
doors_select,exited_select,imp_val_rooms,imp_val_doors,imp_val_occ,
occ_path,remaining_select,temp_exit1,temp_exit2,temp_exit3,temp_exit4,
temp_exit5,rooms_select,rooms_path,temp_exits,cum_exit,rowval,colval)
#one-time print of data .csv files
setwd(expwd)
#write.csv(occupants,"occupants.csv")
#write.csv(exit1,"exit1.csv")
#write.csv(exit2,"exit2.csv")
#write.csv(exit3,"exit3.csv")
#write.csv(exit4,"exit4.csv")
#write.csv(exit5,"exit5.csv")
#write.csv(exited,"exited.csv")
#write.csv(remaining,"remaining.csv")
#write.csv(exit1_cum,"exit1_cum.csv")
#write.csv(exit2_cum,"exit2_cum.csv")
#write.csv(exit3_cum,"exit3_cum.csv")
#write.csv(exit4_cum,"exit4_cum.csv")
#write.csv(exit5_cum,"exit5_cum.csv")
#write.csv(datamatrix,"datamatrix.csv")
tail(exit4_cum)
head(datamatrix)
#write.csv(occupants,"occupants.csv")
write.csv(exit1,"exit1.csv")
write.csv(exit2,"exit2.csv")
write.csv(exit3,"exit3.csv")
write.csv(exit4,"exit4.csv")
write.csv(exit5,"exit5.csv")
#write.csv(exited,"exited.csv")
#write.csv(remaining,"remaining.csv")
write.csv(exit1_cum,"exit1_cum.csv")
write.csv(exit2_cum,"exit2_cum.csv")
write.csv(exit3_cum,"exit3_cum.csv")
write.csv(exit4_cum,"exit4_cum.csv")
write.csv(exit5_cum,"exit5_cum.csv")
write.csv(datamatrix,"datamatrix.csv")
#Analyze data from simulation output
#Set initial conditions
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(lognorm)
library(RColorBrewer)
library(ggpubr)
library(knitr)
#define directory for analysis files
expwd <- "C:/Users/Adam/Desktop/SimThesis/OU-Thesis"
#set directory for simulation data
datawd <- "C:/Users/Adam/Desktop/SimThesis/Pathfinder-Simulation"
setwd(expwd) #sets working directory to analysis folder
#read data that was previous wrangled and printed into appropriate directory
analysisfiles <- list.files(expwd)#list all files in current directory
analysisfiles <- #filter for only .csv files
analysisfiles[str_detect(analysisfiles,".csv")]
for (readers in 1:length(analysisfiles)) {
assign(
str_remove(analysisfiles[readers],".csv"),
read.csv(analysisfiles[readers],stringsAsFactors = FALSE))
}
#plot occupants that exited building
vlines <- c(200,475,550) #create x intercepts for vertical lines
exited_plotdata <- exited %>% select(-X) %>% #final wrangling steps
gather(key = Trial,value = exited,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial") %>%
mutate(Scenario = paste("S",Scenario.Num,sep = ""))
#exited_labeled <- exited_plotdata %>% filter(Trial == "Trial 32") %>%
#filter(Time..s. == 250) #filter for suspect trial
exited_plot <- #generate plot
ggplot(exited_plotdata,mapping = aes(x = Time..s.,y = exited)) +
geom_line(mapping = aes(colour = Scenario, group = Trial)) +
#geom_label(exited_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Exited In Evacuation",
y = "Occupants Exited", x = "Time (s)") +
scale_y_continuous(limits = range(exited_plotdata$exited)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = vlines,
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue("{vlines} s"),
x = vlines, y = 250,angle = 90,vjust = 1)
#plot occupants that remained in building
remaining_plotdata <- remaining %>% select(-X) %>% #final wrangling steps
gather(key = Trial,value = remaining,-Time..s.) %>%
mutate(Trial = str_replace(Trial,"Trial.","Trial ")) %>%
left_join(y = select(datamatrix,Trial,Scenario.Num),by = "Trial") %>%
mutate(Scenario = paste("S",Scenario.Num,sep = ""))
#remaining_labeled <- remaining_plotdata %>% #filters for suspected trial
#filter(Trial == "Trial 32") %>% filter(Time..s. == 250)
remaining_plot <- #generate plot
ggplot(remaining_plotdata,mapping = aes(x = Time..s.,y = remaining)) +
geom_line(mapping = aes(colour = Scenario,group = Trial)) +
#geom_label(data = remaining_labeled,mapping = aes(label = Trial)) +
labs(title = "Total Occupants Remaining In Evacuation",
y = "Occupants Remaining", x = "Time (s)") +
scale_y_continuous(limits = range(remaining_plotdata$remaining)) +
scale_x_continuous(limits = range(exited_plotdata$Time..s.),
n.breaks = 25) +
geom_vline(xintercept = c(200,475,550),
color = "orange", size = 4,alpha = 0.3) +
annotate(geom = "text",label = str_glue("{vlines} s"),
x = vlines, y = 2250,angle = 90,vjust = 1)
#plot exit data by exit
exit1_cum_plot_data <- exit1_cum %>% select(-X) %>%#df of flattened exit1 data
gather(key = Trial,value = numexited,-Time..s.) %>%
mutate(exit = "Exit 1",Trial = str_replace(Trial,"Trial.","Trial "))
exit2_cum_plot_data <- exit2_cum %>% select(-X) %>%#df of flattened exit2 data
gather(key = Trial,value = numexited,-Time..s.) %>%
mutate(exit = "Exit 2",Trial = str_replace(Trial,"Trial.","Trial "))
exit3_cum_plot_data <- exit3_cum %>% select(-X) %>%#df of flattened exit3 data
gather(key = Trial,value = numexited,-Time..s.) %>%
mutate(exit = "Exit 3",Trial = str_replace(Trial,"Trial.","Trial "))
exit4_cum_plot_data <- exit4_cum %>% select(-X) %>%#df of flattened exit4 data
gather(key = Trial,value = numexited,-Time..s.) %>%
mutate(exit = "Exit 4",Trial = str_replace(Trial,"Trial.","Trial "))
exit5_cum_plot_data <- exit5_cum %>% select(-X) %>%#df of flattened exit5 data
gather(key = Trial,value = numexited,-Time..s.) %>%
mutate(exit = "Exit 5",Trial = str_replace(Trial,"Trial.","Trial "))
all_exit_cum_data <- rbind(exit1_cum_plot_data,exit2_cum_plot_data,
exit3_cum_plot_data,exit4_cum_plot_data,
exit5_cum_plot_data) %>% #append exit data frames
left_join(y = select(datamatrix,Trial,Scenario),by = "Trial")
#all_exit_labeled <- all_exit_cum_data %>% #filter for suspected trial
#filter(Trial == "Trial 32") %>% filter(Time..s. == 250)
all_exit_cum_plot <- #generate plot
ggplot(all_exit_cum_data, mapping = aes(x = Time..s.,y = numexited)) +
geom_line(mapping = aes(colour = Scenario,group = Trial)) +
#geom_label(data = all_exit_labeled,mapping = aes(label = Trial)) +
facet_wrap(facets = ~exit) + #add facets for multiple plots
labs(title = "Total Occupants Exited by Exit",
y = "Occupants Exited",
x = "Time (s)")
#plot proportion of occupants that exited by trial
prop_exits_plot_data <- datamatrix %>%#final data wrangling
select(Scenario,Trial.Index,Exit1,Exit2,Exit3,Exit4,Exit5) %>%
gather(key = exit,value = numexited,Exit1,Exit2,Exit3,Exit4,Exit5)
prop_exited_plot <- #generate plot
ggplot(prop_exits_plot_data) +
geom_col(mapping = aes(x = Trial.Index,y = numexited,fill = exit),
position = "fill") +
facet_wrap(facets = ~Scenario) +
labs(title = "Proportion of Agents choosing each Exit",
x = "Trial Number",y = "Proporition of Agents",fill = "Exit")
#plot TET
TET_plot_data <- #pick data
select(datamatrix,Trial,Scenario,Trial.Index,
Max.TET,Avg.TET.arithmetic,sd.TET.arithmetic)
TET_plot <- #generate plot
ggplot(TET_plot_data,mapping = aes(x = Trial.Index, colour = Scenario)) +
geom_segment(mapping = aes(y = Max.TET,xend = Trial.Index+1,yend = Max.TET)) +
geom_point(mapping = aes(y = Avg.TET.arithmetic,size = sd.TET.arithmetic)) +
labs(title = "Average and Maximum Evacuation Times",
x = "Trial Number",y = "Time (s)",size = "Standard Deviation")
TET_hist <- #plot TET histogram
ggplot (TET_plot_data,mapping = aes(x = Max.TET)) +
geom_histogram(binwidth = 10) +
facet_wrap(facets = ~Scenario) +
labs(title = "Histogram of Total Evacuation Time",
x = "Time (s)",y = "Count")
TET_box <- #plot TET boxplot
ggplot(TET_plot_data,mapping = aes(x = Scenario, y = Max.TET)) +
geom_boxplot() +
labs(title = "Box Plot of Total Evacuation Time",
x = "Simulation Scenario",y = "Time (s)")
#plot Avg Distance
dist_plot_data <- #pick data
select(datamatrix,Trial,Scenario,Trial.Index,
Avg.Distance.arithmetic,sd.Distance.arithmetic)
dist_plot <- #generate plot
ggplot(dist_plot_data,mapping = aes(x = Trial.Index, colour = Scenario)) +
geom_point(mapping = aes(y = Avg.Distance.arithmetic,
size = sd.Distance.arithmetic)) +
labs(title = "Average and Maximum Travel Distance",
x = "Trial Number",y = "Distance (m)",size = "Standard Deviation")
dist_hist <- #plot TET histogram
ggplot (dist_plot_data,mapping = aes(x = Avg.Distance.arithmetic)) +
geom_histogram(binwidth = 1) +
facet_wrap(facets = ~Scenario) +
labs(title = "Histogram of Average Travel Distance",
x = "Distance (m)",y = "Count")
dist_box <- #plot TET boxplot
ggplot(dist_plot_data,mapping = aes(x = Scenario,
y = Avg.Distance.arithmetic)) +
geom_boxplot() +
labs(title = "Box Plot of Average Travel Distance",
x = "Simulation Scenario",y = "Distance (m)")
#start ANOVA of TET
#outsub <- "Outlier(s) Removed" #define lable for outliers removed
anova_df <- #make analysis df
datamatrix %>%
select(startposition,obstaclespresent,populationsize,Max.TET,
Avg.Distance.arithmetic,Trial.Index,Starting.Position,
Obstacles,Population.Size) %>%
mutate(startposition = as.factor(startposition),
obstaclespresent = as.factor(obstaclespresent),
populationsize = as.factor(populationsize)) #%>%
#filter(Trial.Index != 32) #remove Trial 32, which is an outlier
TET_anova <- #generate anova model
aov(Max.TET ~ startposition * obstaclespresent * populationsize,
data = anova_df)
TET_residual_data <- #draw out residuals & fitted values
data.frame(TET_anova$residuals,TET_anova$fitted.values) %>%
mutate(Trial.Index = c(1:40)) %>%
left_join(select(datamatrix,Trial.Index,Scenario),by = "Trial.Index")
TET_residual_plot <- #generate residual plot
ggplot(TET_residual_data,
mapping = aes(x = TET_anova.fitted.values,y = TET_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of TET Values",
x = "Fitted TET Values (s)",
y = "Residuals"#,
#subtitle = outsub
)
TET_qq_plot_residuals <- ggqqplot(TET_anova$residuals) +
labs(title = "Q-Q Plot of TET Residuals"#,
#subtitle = outsub
)#generate plot to test normality
TET_qq_plot_effects <- ggqqplot(TET_anova$effects) +
labs(title = "Q-Q Plot of TET Effects"#,
#subtitle = outsub
)#generate plot to test normality
TET_population_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = populationsize,y = Max.TET)) +
stat_summary(fun = mean,geom = "line",#create connecting line
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",#create points for main effects
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "text",#add values labels of main effects
mapping = aes(label = round(..y..,2)), hjust = -0.3) +
scale_x_discrete(labels = c("Low","High")) +
labs(title = "Main Effects Plot for TET against Population Size",
x = "Population Factor Level", y = "Response: TET (s)"#,
#subtitle = outsub
)
TET_obstacles_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = obstaclespresent,y = Max.TET)) +
stat_summary(fun = mean,geom = "line",#create connecting line
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",#create points for main effects
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "text",#add values labels of main effects
mapping = aes(label = round(..y..,2)), hjust = -0.3) +
scale_x_discrete(labels = c("Not-Present","Present")) +
labs(title = "Main Effects Plot for TET against the Presence of Obstacles",
x = "Obstacle Factor Level", y = "Response: TET (s)"#,
#subtitle = outsub
)
TET_position_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = startposition,y = Max.TET)) +
stat_summary(fun = mean,geom = "line",#create connecting line
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",#create points for main effects
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "text", #add values labels of main effects
mapping = aes(label = round(..y..,2)), hjust = -0.3) +
scale_x_discrete(labels = c("Unconcentrated","Concentrated")) +
labs(title =
"Main Effects Plot for TET against the Starting Position of Agents",
x = "Position Factor Level", y = "Response: TET (s)"#,
#subtitle = outsub
)
#start ANOVA for avg distance traveled
#anova_df <- #remove another outlier that exits for avg distance
#anova_df %>% filter(Trial.Index != 6)
distance_anova <- aov(Avg.Distance.arithmetic ~ populationsize *
obstaclespresent * startposition, data = anova_df)
distance_residual_data <- #collect residuals from ANOVA output
data.frame(distance_anova$residuals,distance_anova$fitted.values) %>%
mutate(Trial.Index = c(1:40)) %>%
left_join(select(datamatrix,Scenario,Trial.Index),by = "Trial.Index")
distance_residual_plot <- #generate plot of residuals vs. fitted values
ggplot(data = distance_residual_data,
mapping = aes(x = distance_anova.fitted.values,
y = distance_anova.residuals)) +
geom_point(mapping = aes(colour = Scenario)) +
labs(title = "Plot of Residuals of Average Distance Traveled",
x = "Fitted Distance Values (m)",y = "Residuals"#,
#subtitle = outsub
)
distance_qq_plot_residuals <- #generate qq plot of residuals
ggqqplot(distance_anova$residuals) +
labs(title = "Q-Q Plot of Average Distance Residuals"#,
#subtitle = outsub
)
distance_qq_plot_effects <- #generate qq plot of effects
ggqqplot(distance_anova$effects) +
labs(title = "Q-Q Plot of Average Distance Effects"#,
#subtitle = outsub
)
distance_population_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = populationsize,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "text",#add values labels of main effects
mapping = aes(label = round(..y..,2)), hjust = -0.3) +
scale_x_discrete(labels = c("Low","High")) +
labs(title =
"Main Effects Plot for Average Distance Traveled against the Population Size",
x = "Population Factor Level", y = "Response: Distance Traveled (m)"#,
#subtitle = outsub
)
distance_obstacles_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = obstaclespresent,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "text",#add values labels of main effects
mapping = aes(label = round(..y..,2)), hjust = -0.3) +
scale_x_discrete(labels = c("Not Present","Present")) +
labs(title =
"Main Effects Plot for Average Distance Traveled against the
Presence of Obstacles",
x = "Obstacle Factor Level", y = "Response: Distance Traveled (m)"#,
#subtitle = outsub
)
distance_position_me_plot <- #generate main effects plot
ggplot(anova_df,mapping = aes(x = startposition,
y = Avg.Distance.arithmetic)) +
stat_summary(fun = mean,geom = "line",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "point",
aes(color = "red",group = 1),show.legend = FALSE) +
stat_summary(fun = mean,geom = "text",#add values labels of main effects
mapping = aes(label = round(..y..,2)), hjust = -0.3) +
scale_x_discrete(labels = c("Unconcentrated","Concentrated")) +
labs(title =
"Main Effects Plot for Average Distance Traveled against the Starting
Position of Agents",
x = "Position Factor Level", y = "Response: Distance Traveled (m)"#,
#subtitle = outsub
)
#take a sample of two from each scenario group for analysis within Pathfinder
#sample(datamatrix[datamatrix$Scenario == "S4","Trial.Index"],2)
#S1 = 18 and 30,S2 = 29 and 24,S3 = 40 and 2,S4 = 31 and 8
#Trial 32 will also be included since it is such a large outlier
#take a sample of times to analyze further using Pathfinder
#sample(c(100:225),1)#select a time from beginning of sim to analyze [183 s]
#sample(c(250:450),1)#select a time from midle of sim to analyze [325 s]
#sample(c(500:550),1)#select a time from end of sim for low population [504 s]
#sample(c(600:675),1)#select a time from end of sim for high population [637 s]
all_exit_cum_plot
summary(TET_anova)
summary(distance_anova)
summary(TET_anova)
